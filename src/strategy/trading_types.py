"""
Shared Trading Strategy Data Types
Common data classes used across the trading strategy modules.
"""

import pandas as pd
from typing import List, Dict, Tuple, Optional, Any
from dataclasses import dataclass
from enum import Enum

@dataclass
class Fractal:
    """Represents a fractal (local high or low)."""
    timestamp: pd.Timestamp
    price: float
    fractal_type: str  # 'high' or 'low'
    bar_index: int

@dataclass
class Swing:
    """Represents a swing between two fractals."""
    start_fractal: Fractal
    end_fractal: Fractal
    direction: str  # 'up' or 'down'
    points: float  # Price difference (magnitude)
    bars: int      # Number of bars
    is_dominant: bool = False  # True if this is the dominant swing

@dataclass
class FibonacciLevel:
    """Fibonacci retracement level."""
    level: float    # 0.236, 0.382, 0.500, 0.618, 0.786
    price: float    # Actual price level
    hit: bool = False

@dataclass
class TradingSignal:
    """Trading signal generated by strategy."""
    timestamp: pd.Timestamp
    signal_type: str  # 'buy' or 'sell'
    price: float
    fibonacci_level: float
    swing_direction: str
    confidence: float
    stop_loss: float
    take_profit: float

@dataclass
class ABCWave:
    """Represents a single wave in an ABC correction pattern."""
    start_timestamp: pd.Timestamp
    end_timestamp: pd.Timestamp
    start_price: float
    end_price: float
    wave_type: str  # 'A', 'B', or 'C'
    direction: str  # 'up' or 'down'
    points: float   # Price difference (magnitude)
    bars: int       # Number of bars

@dataclass
class ABCPattern:
    """Represents a complete ABC correction pattern."""
    wave_a: ABCWave
    wave_b: ABCWave
    wave_c: ABCWave
    pattern_type: str  # 'zigzag', 'flat', 'triangle'
    is_complete: bool = False
    fibonacci_confluence: Optional[float] = None  # If Wave C ends at Fib level